// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jpmorganchase/quorum-account-plugin-sdk-go/proto (interfaces: AccountServiceClient,AccountService_GetEventStreamClient,AccountServiceServer,AccountService_GetEventStreamServer)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/jpmorganchase/quorum-account-plugin-sdk-go/proto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockAccountServiceClient is a mock of AccountServiceClient interface
type MockAccountServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceClientMockRecorder
}

// MockAccountServiceClientMockRecorder is the mock recorder for MockAccountServiceClient
type MockAccountServiceClientMockRecorder struct {
	mock *MockAccountServiceClient
}

// NewMockAccountServiceClient creates a new mock instance
func NewMockAccountServiceClient(ctrl *gomock.Controller) *MockAccountServiceClient {
	mock := &MockAccountServiceClient{ctrl: ctrl}
	mock.recorder = &MockAccountServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountServiceClient) EXPECT() *MockAccountServiceClientMockRecorder {
	return m.recorder
}

// Accounts mocks base method
func (m *MockAccountServiceClient) Accounts(arg0 context.Context, arg1 *proto.AccountsRequest, arg2 ...grpc.CallOption) (*proto.AccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Accounts", varargs...)
	ret0, _ := ret[0].(*proto.AccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts
func (mr *MockAccountServiceClientMockRecorder) Accounts(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockAccountServiceClient)(nil).Accounts), varargs...)
}

// Close mocks base method
func (m *MockAccountServiceClient) Close(arg0 context.Context, arg1 *proto.CloseRequest, arg2 ...grpc.CallOption) (*proto.CloseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Close", varargs...)
	ret0, _ := ret[0].(*proto.CloseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close
func (mr *MockAccountServiceClientMockRecorder) Close(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAccountServiceClient)(nil).Close), varargs...)
}

// Contains mocks base method
func (m *MockAccountServiceClient) Contains(arg0 context.Context, arg1 *proto.ContainsRequest, arg2 ...grpc.CallOption) (*proto.ContainsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Contains", varargs...)
	ret0, _ := ret[0].(*proto.ContainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contains indicates an expected call of Contains
func (mr *MockAccountServiceClientMockRecorder) Contains(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockAccountServiceClient)(nil).Contains), varargs...)
}

// GetEventStream mocks base method
func (m *MockAccountServiceClient) GetEventStream(arg0 context.Context, arg1 *proto.GetEventStreamRequest, arg2 ...grpc.CallOption) (proto.AccountService_GetEventStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventStream", varargs...)
	ret0, _ := ret[0].(proto.AccountService_GetEventStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventStream indicates an expected call of GetEventStream
func (mr *MockAccountServiceClientMockRecorder) GetEventStream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventStream", reflect.TypeOf((*MockAccountServiceClient)(nil).GetEventStream), varargs...)
}

// ImportRawKey mocks base method
func (m *MockAccountServiceClient) ImportRawKey(arg0 context.Context, arg1 *proto.ImportRawKeyRequest, arg2 ...grpc.CallOption) (*proto.ImportRawKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportRawKey", varargs...)
	ret0, _ := ret[0].(*proto.ImportRawKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportRawKey indicates an expected call of ImportRawKey
func (mr *MockAccountServiceClientMockRecorder) ImportRawKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRawKey", reflect.TypeOf((*MockAccountServiceClient)(nil).ImportRawKey), varargs...)
}

// Lock mocks base method
func (m *MockAccountServiceClient) Lock(arg0 context.Context, arg1 *proto.LockRequest, arg2 ...grpc.CallOption) (*proto.LockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lock", varargs...)
	ret0, _ := ret[0].(*proto.LockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock
func (mr *MockAccountServiceClientMockRecorder) Lock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockAccountServiceClient)(nil).Lock), varargs...)
}

// NewAccount mocks base method
func (m *MockAccountServiceClient) NewAccount(arg0 context.Context, arg1 *proto.NewAccountRequest, arg2 ...grpc.CallOption) (*proto.NewAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewAccount", varargs...)
	ret0, _ := ret[0].(*proto.NewAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAccount indicates an expected call of NewAccount
func (mr *MockAccountServiceClientMockRecorder) NewAccount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccount", reflect.TypeOf((*MockAccountServiceClient)(nil).NewAccount), varargs...)
}

// Open mocks base method
func (m *MockAccountServiceClient) Open(arg0 context.Context, arg1 *proto.OpenRequest, arg2 ...grpc.CallOption) (*proto.OpenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Open", varargs...)
	ret0, _ := ret[0].(*proto.OpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockAccountServiceClientMockRecorder) Open(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockAccountServiceClient)(nil).Open), varargs...)
}

// SignHash mocks base method
func (m *MockAccountServiceClient) SignHash(arg0 context.Context, arg1 *proto.SignHashRequest, arg2 ...grpc.CallOption) (*proto.SignHashResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignHash", varargs...)
	ret0, _ := ret[0].(*proto.SignHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignHash indicates an expected call of SignHash
func (mr *MockAccountServiceClientMockRecorder) SignHash(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignHash", reflect.TypeOf((*MockAccountServiceClient)(nil).SignHash), varargs...)
}

// SignHashWithPassphrase mocks base method
func (m *MockAccountServiceClient) SignHashWithPassphrase(arg0 context.Context, arg1 *proto.SignHashWithPassphraseRequest, arg2 ...grpc.CallOption) (*proto.SignHashResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignHashWithPassphrase", varargs...)
	ret0, _ := ret[0].(*proto.SignHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignHashWithPassphrase indicates an expected call of SignHashWithPassphrase
func (mr *MockAccountServiceClientMockRecorder) SignHashWithPassphrase(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignHashWithPassphrase", reflect.TypeOf((*MockAccountServiceClient)(nil).SignHashWithPassphrase), varargs...)
}

// SignTx mocks base method
func (m *MockAccountServiceClient) SignTx(arg0 context.Context, arg1 *proto.SignTxRequest, arg2 ...grpc.CallOption) (*proto.SignTxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignTx", varargs...)
	ret0, _ := ret[0].(*proto.SignTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTx indicates an expected call of SignTx
func (mr *MockAccountServiceClientMockRecorder) SignTx(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTx", reflect.TypeOf((*MockAccountServiceClient)(nil).SignTx), varargs...)
}

// SignTxWithPassphrase mocks base method
func (m *MockAccountServiceClient) SignTxWithPassphrase(arg0 context.Context, arg1 *proto.SignTxWithPassphraseRequest, arg2 ...grpc.CallOption) (*proto.SignTxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignTxWithPassphrase", varargs...)
	ret0, _ := ret[0].(*proto.SignTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTxWithPassphrase indicates an expected call of SignTxWithPassphrase
func (mr *MockAccountServiceClientMockRecorder) SignTxWithPassphrase(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTxWithPassphrase", reflect.TypeOf((*MockAccountServiceClient)(nil).SignTxWithPassphrase), varargs...)
}

// Status mocks base method
func (m *MockAccountServiceClient) Status(arg0 context.Context, arg1 *proto.StatusRequest, arg2 ...grpc.CallOption) (*proto.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*proto.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockAccountServiceClientMockRecorder) Status(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAccountServiceClient)(nil).Status), varargs...)
}

// TimedUnlock mocks base method
func (m *MockAccountServiceClient) TimedUnlock(arg0 context.Context, arg1 *proto.TimedUnlockRequest, arg2 ...grpc.CallOption) (*proto.TimedUnlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TimedUnlock", varargs...)
	ret0, _ := ret[0].(*proto.TimedUnlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TimedUnlock indicates an expected call of TimedUnlock
func (mr *MockAccountServiceClientMockRecorder) TimedUnlock(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimedUnlock", reflect.TypeOf((*MockAccountServiceClient)(nil).TimedUnlock), varargs...)
}

// MockAccountService_GetEventStreamClient is a mock of AccountService_GetEventStreamClient interface
type MockAccountService_GetEventStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountService_GetEventStreamClientMockRecorder
}

// MockAccountService_GetEventStreamClientMockRecorder is the mock recorder for MockAccountService_GetEventStreamClient
type MockAccountService_GetEventStreamClientMockRecorder struct {
	mock *MockAccountService_GetEventStreamClient
}

// NewMockAccountService_GetEventStreamClient creates a new mock instance
func NewMockAccountService_GetEventStreamClient(ctrl *gomock.Controller) *MockAccountService_GetEventStreamClient {
	mock := &MockAccountService_GetEventStreamClient{ctrl: ctrl}
	mock.recorder = &MockAccountService_GetEventStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountService_GetEventStreamClient) EXPECT() *MockAccountService_GetEventStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockAccountService_GetEventStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockAccountService_GetEventStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAccountService_GetEventStreamClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockAccountService_GetEventStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockAccountService_GetEventStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAccountService_GetEventStreamClient)(nil).Context))
}

// Header mocks base method
func (m *MockAccountService_GetEventStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockAccountService_GetEventStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAccountService_GetEventStreamClient)(nil).Header))
}

// Recv mocks base method
func (m *MockAccountService_GetEventStreamClient) Recv() (*proto.GetEventStreamResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.GetEventStreamResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockAccountService_GetEventStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAccountService_GetEventStreamClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockAccountService_GetEventStreamClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockAccountService_GetEventStreamClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAccountService_GetEventStreamClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockAccountService_GetEventStreamClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockAccountService_GetEventStreamClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAccountService_GetEventStreamClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockAccountService_GetEventStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockAccountService_GetEventStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAccountService_GetEventStreamClient)(nil).Trailer))
}

// MockAccountServiceServer is a mock of AccountServiceServer interface
type MockAccountServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceServerMockRecorder
}

// MockAccountServiceServerMockRecorder is the mock recorder for MockAccountServiceServer
type MockAccountServiceServerMockRecorder struct {
	mock *MockAccountServiceServer
}

// NewMockAccountServiceServer creates a new mock instance
func NewMockAccountServiceServer(ctrl *gomock.Controller) *MockAccountServiceServer {
	mock := &MockAccountServiceServer{ctrl: ctrl}
	mock.recorder = &MockAccountServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountServiceServer) EXPECT() *MockAccountServiceServerMockRecorder {
	return m.recorder
}

// Accounts mocks base method
func (m *MockAccountServiceServer) Accounts(arg0 context.Context, arg1 *proto.AccountsRequest) (*proto.AccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounts", arg0, arg1)
	ret0, _ := ret[0].(*proto.AccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts
func (mr *MockAccountServiceServerMockRecorder) Accounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockAccountServiceServer)(nil).Accounts), arg0, arg1)
}

// Close mocks base method
func (m *MockAccountServiceServer) Close(arg0 context.Context, arg1 *proto.CloseRequest) (*proto.CloseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0, arg1)
	ret0, _ := ret[0].(*proto.CloseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close
func (mr *MockAccountServiceServerMockRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAccountServiceServer)(nil).Close), arg0, arg1)
}

// Contains mocks base method
func (m *MockAccountServiceServer) Contains(arg0 context.Context, arg1 *proto.ContainsRequest) (*proto.ContainsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", arg0, arg1)
	ret0, _ := ret[0].(*proto.ContainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Contains indicates an expected call of Contains
func (mr *MockAccountServiceServerMockRecorder) Contains(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockAccountServiceServer)(nil).Contains), arg0, arg1)
}

// GetEventStream mocks base method
func (m *MockAccountServiceServer) GetEventStream(arg0 *proto.GetEventStreamRequest, arg1 proto.AccountService_GetEventStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEventStream indicates an expected call of GetEventStream
func (mr *MockAccountServiceServerMockRecorder) GetEventStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventStream", reflect.TypeOf((*MockAccountServiceServer)(nil).GetEventStream), arg0, arg1)
}

// ImportRawKey mocks base method
func (m *MockAccountServiceServer) ImportRawKey(arg0 context.Context, arg1 *proto.ImportRawKeyRequest) (*proto.ImportRawKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportRawKey", arg0, arg1)
	ret0, _ := ret[0].(*proto.ImportRawKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportRawKey indicates an expected call of ImportRawKey
func (mr *MockAccountServiceServerMockRecorder) ImportRawKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRawKey", reflect.TypeOf((*MockAccountServiceServer)(nil).ImportRawKey), arg0, arg1)
}

// Lock mocks base method
func (m *MockAccountServiceServer) Lock(arg0 context.Context, arg1 *proto.LockRequest) (*proto.LockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0, arg1)
	ret0, _ := ret[0].(*proto.LockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock
func (mr *MockAccountServiceServerMockRecorder) Lock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockAccountServiceServer)(nil).Lock), arg0, arg1)
}

// NewAccount mocks base method
func (m *MockAccountServiceServer) NewAccount(arg0 context.Context, arg1 *proto.NewAccountRequest) (*proto.NewAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccount", arg0, arg1)
	ret0, _ := ret[0].(*proto.NewAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAccount indicates an expected call of NewAccount
func (mr *MockAccountServiceServerMockRecorder) NewAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccount", reflect.TypeOf((*MockAccountServiceServer)(nil).NewAccount), arg0, arg1)
}

// Open mocks base method
func (m *MockAccountServiceServer) Open(arg0 context.Context, arg1 *proto.OpenRequest) (*proto.OpenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(*proto.OpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockAccountServiceServerMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockAccountServiceServer)(nil).Open), arg0, arg1)
}

// SignHash mocks base method
func (m *MockAccountServiceServer) SignHash(arg0 context.Context, arg1 *proto.SignHashRequest) (*proto.SignHashResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignHash", arg0, arg1)
	ret0, _ := ret[0].(*proto.SignHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignHash indicates an expected call of SignHash
func (mr *MockAccountServiceServerMockRecorder) SignHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignHash", reflect.TypeOf((*MockAccountServiceServer)(nil).SignHash), arg0, arg1)
}

// SignHashWithPassphrase mocks base method
func (m *MockAccountServiceServer) SignHashWithPassphrase(arg0 context.Context, arg1 *proto.SignHashWithPassphraseRequest) (*proto.SignHashResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignHashWithPassphrase", arg0, arg1)
	ret0, _ := ret[0].(*proto.SignHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignHashWithPassphrase indicates an expected call of SignHashWithPassphrase
func (mr *MockAccountServiceServerMockRecorder) SignHashWithPassphrase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignHashWithPassphrase", reflect.TypeOf((*MockAccountServiceServer)(nil).SignHashWithPassphrase), arg0, arg1)
}

// SignTx mocks base method
func (m *MockAccountServiceServer) SignTx(arg0 context.Context, arg1 *proto.SignTxRequest) (*proto.SignTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTx", arg0, arg1)
	ret0, _ := ret[0].(*proto.SignTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTx indicates an expected call of SignTx
func (mr *MockAccountServiceServerMockRecorder) SignTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTx", reflect.TypeOf((*MockAccountServiceServer)(nil).SignTx), arg0, arg1)
}

// SignTxWithPassphrase mocks base method
func (m *MockAccountServiceServer) SignTxWithPassphrase(arg0 context.Context, arg1 *proto.SignTxWithPassphraseRequest) (*proto.SignTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTxWithPassphrase", arg0, arg1)
	ret0, _ := ret[0].(*proto.SignTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTxWithPassphrase indicates an expected call of SignTxWithPassphrase
func (mr *MockAccountServiceServerMockRecorder) SignTxWithPassphrase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTxWithPassphrase", reflect.TypeOf((*MockAccountServiceServer)(nil).SignTxWithPassphrase), arg0, arg1)
}

// Status mocks base method
func (m *MockAccountServiceServer) Status(arg0 context.Context, arg1 *proto.StatusRequest) (*proto.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*proto.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockAccountServiceServerMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAccountServiceServer)(nil).Status), arg0, arg1)
}

// TimedUnlock mocks base method
func (m *MockAccountServiceServer) TimedUnlock(arg0 context.Context, arg1 *proto.TimedUnlockRequest) (*proto.TimedUnlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimedUnlock", arg0, arg1)
	ret0, _ := ret[0].(*proto.TimedUnlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TimedUnlock indicates an expected call of TimedUnlock
func (mr *MockAccountServiceServerMockRecorder) TimedUnlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimedUnlock", reflect.TypeOf((*MockAccountServiceServer)(nil).TimedUnlock), arg0, arg1)
}

// MockAccountService_GetEventStreamServer is a mock of AccountService_GetEventStreamServer interface
type MockAccountService_GetEventStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockAccountService_GetEventStreamServerMockRecorder
}

// MockAccountService_GetEventStreamServerMockRecorder is the mock recorder for MockAccountService_GetEventStreamServer
type MockAccountService_GetEventStreamServerMockRecorder struct {
	mock *MockAccountService_GetEventStreamServer
}

// NewMockAccountService_GetEventStreamServer creates a new mock instance
func NewMockAccountService_GetEventStreamServer(ctrl *gomock.Controller) *MockAccountService_GetEventStreamServer {
	mock := &MockAccountService_GetEventStreamServer{ctrl: ctrl}
	mock.recorder = &MockAccountService_GetEventStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountService_GetEventStreamServer) EXPECT() *MockAccountService_GetEventStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockAccountService_GetEventStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockAccountService_GetEventStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAccountService_GetEventStreamServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockAccountService_GetEventStreamServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockAccountService_GetEventStreamServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAccountService_GetEventStreamServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockAccountService_GetEventStreamServer) Send(arg0 *proto.GetEventStreamResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockAccountService_GetEventStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockAccountService_GetEventStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockAccountService_GetEventStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockAccountService_GetEventStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockAccountService_GetEventStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockAccountService_GetEventStreamServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockAccountService_GetEventStreamServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAccountService_GetEventStreamServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockAccountService_GetEventStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockAccountService_GetEventStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAccountService_GetEventStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockAccountService_GetEventStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockAccountService_GetEventStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockAccountService_GetEventStreamServer)(nil).SetTrailer), arg0)
}
